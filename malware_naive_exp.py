import pandas as pd
import collections
import re
from sklearn.model_selection import train_test_split
import lime
import sklearn
import numpy as np
import sklearn
import sklearn.ensemble
import sklearn.metrics
import sklearn.feature_extraction
from sklearn.naive_bayes import MultinomialNB
from lime import lime_text
from sklearn.pipeline import make_pipeline
from lime.lime_text import LimeTextExplainer
from sklearn.cross_validation import StratifiedKFold

# using APIMDS dataset
data = pd.read_csv("new_api_call_6.csv")

data["c00"].apply(str)

#data

delete_label = ['Trojan-Ransom.Win32.Blocker', 'Trojan-Ransom.Win32.Gimemo', 'Trojan-Ransom.Win32.Birele', 'Trojan-Ransom.Win32.FakeInstaller', 'Trojan-Ransom.Win32.Digitala', 'Trojan-Ransom.Win32.Xorist', 'Trojan-Ransom.Win32.MBro', 'Trojan-Ransom.Win32.HmBlocker']

x_pre = []
y_pre = []
for _, row in data.iterrows():
    x_pre.append(row["result"])
    y_pre.append(row["c00"])

y = []
for i in y_pre:
    l = str(i).split(".")
    del l[-1]
    a = ".".join(l)
    y.append(a)


y_dict = collections.Counter(y)

class_names = []

#for k in y_dict.keys():
   # class_names.append(k)
#print class_names

class_names = ['Trojan-Ransom.Win32.Agent', 'Trojan-Ransom.Win32.Foreign', 'Trojan-Ransom.Win32.Mbro', 'Trojan-Ransom.Win32.PornoAsset']

x = []
for i in x_pre:
    a = re.sub("nan", "", i)
    x.append(a)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.4)

vectorizer = sklearn.feature_extraction.text.TfidfVectorizer(lowercase=False)

train_vectors = vectorizer.fit_transform(x_train)
test_vectors = vectorizer.transform(x_test)

nb = MultinomialNB(alpha=.01)

nb.fit(train_vectors, y_train)

pred = nb.predict(test_vectors)
print sklearn.metrics.f1_score(y_test, pred, average='weighted')

# Cross Validation
#kfold = StratifiedKFold(y=y_train, n_folds=10, random_state=1)

#for k, (train, test) in enumerate(kfold):
   # nb.fit(train_vectors[train], y_train[train])
   # score = nb.score(train_vectors[test], y_train[test])
   # print "score is " + score

c = make_pipeline(vectorizer, nb)

result_list = []
result_label = []
for i in range(len(x_test)):
    explainer = LimeTextExplainer(class_names=class_names)
    exp = explainer.explain_instance(x_test[i], c.predict_proba, num_features=3)

    pred_label = exp.available_labels()

    print "The prediction is " + nb.predict(test_vectors[i]).reshape(1,-1)[0,0]
    #print "pred is " + class_names[int(nb.predict(test_vectors[i]).reshape(1,-1)[0,0])]
    print "True label is " + y_test[i]
    
    ans = exp.as_list()
    print ans
    result_list.append(ans)
    res = str(nb.predict(test_vectors[i]).reshape(1,-1)[0,0]) + "_" + y_test[i]
    result_label.append(res)
    
with open("result_lime.txt", "w") as f:
    for (i_1, i_2) in zip(result_list, result_label):
        f.write(i_2 + "\n")
        for j in i_1:
            f.write(str(j) + "\n")
